\contentsline {chapter}{\numberline {1}Introduction}{1}
\contentsline {section}{\numberline {1.1}The beginning}{1}
\contentsline {section}{\numberline {1.2}Closing the gap}{2}
\contentsline {section}{\numberline {1.3}The project}{3}
\contentsline {section}{\numberline {1.4}Assembler convention}{3}
\contentsline {chapter}{\numberline {2}Preparation}{5}
\contentsline {section}{\numberline {2.1}What do we want?}{5}
\contentsline {subsection}{\numberline {2.1.1}Static recompilation}{5}
\contentsline {subsection}{\numberline {2.1.2}Dynamic recompilation}{7}
\contentsline {section}{\numberline {2.2}What needs to be done}{8}
\contentsline {section}{\numberline {2.3}Interpretive emulation}{8}
\contentsline {section}{\numberline {2.4}Recompiling emulation}{8}
\contentsline {subsection}{\numberline {2.4.1}Understanding the problem}{8}
\contentsline {subsection}{\numberline {2.4.2}Breaking it down}{9}
\contentsline {subsection}{\numberline {2.4.3}Compilation}{10}
\contentsline {subsubsection}{Cache coherency}{10}
\contentsline {section}{\numberline {2.5}Implementation}{10}
\contentsline {subsection}{\numberline {2.5.1}Choice of platform}{10}
\contentsline {subsection}{\numberline {2.5.2}Software engineering}{11}
\contentsline {subsection}{\numberline {2.5.3}Backups}{11}
\contentsline {section}{\numberline {2.6}Project title}{11}
\contentsline {chapter}{\numberline {3}Implementation}{13}
\contentsline {section}{\numberline {3.1}Execution model}{13}
\contentsline {subsection}{\numberline {3.1.1}System calls}{13}
\contentsline {section}{\numberline {3.2}Interpreter}{14}
\contentsline {subsection}{\numberline {3.2.1}Decoder}{14}
\contentsline {subsection}{\numberline {3.2.2}Executing instructions}{15}
\contentsline {section}{\numberline {3.3}Profiler}{15}
\contentsline {subsection}{\numberline {3.3.1}Profiler example}{16}
\contentsline {section}{\numberline {3.4}Intermediate code}{16}
\contentsline {subsection}{\numberline {3.4.1}Registers}{18}
\contentsline {subsection}{\numberline {3.4.2}Flags}{19}
\contentsline {subsection}{\numberline {3.4.3}Use of temporaries}{20}
\contentsline {subsection}{\numberline {3.4.4}Flow control}{20}
\contentsline {subsection}{\numberline {3.4.5}How translation works}{22}
\contentsline {subsubsection}{Backpatching}{22}
\contentsline {subsubsection}{Example conversion sequences}{23}
\contentsline {subsubsection}{Conditionals}{24}
\contentsline {subsubsection}{Register shifts}{24}
\contentsline {section}{\numberline {3.5}Native code}{25}
\contentsline {subsection}{\numberline {3.5.1}Run-time assembly}{25}
\contentsline {subsection}{\numberline {3.5.2}Code templates}{26}
\contentsline {subsubsection}{A simple rule}{26}
\contentsline {subsubsection}{More complex rules}{28}
\contentsline {subsubsection}{Storage of rules}{29}
\contentsline {subsection}{\numberline {3.5.3}Code analysis}{29}
\contentsline {subsubsection}{Basic blocks}{29}
\contentsline {subsubsection}{Data flow}{30}
\contentsline {subsubsection}{Control flow}{31}
\contentsline {subsection}{\numberline {3.5.4}Template matching}{31}
\contentsline {subsubsection}{The matching algorithm}{31}
\contentsline {subsubsection}{An example}{33}
\contentsline {subsection}{\numberline {3.5.5}Code generation}{34}
\contentsline {subsubsection}{Generating functions}{34}
\contentsline {subsection}{\numberline {3.5.6}Register allocation}{35}
\contentsline {subsection}{\numberline {3.5.7}Allocation state coercion}{37}
\contentsline {subsection}{\numberline {3.5.8}Flag caching}{38}
\contentsline {subsubsection}{Flag store code sequence}{39}
\contentsline {subsubsection}{Flag restore code sequence}{39}
\contentsline {subsubsection}{The carry {\it vs} borrow problem}{40}
\contentsline {subsection}{\numberline {3.5.9}Code interfaces}{40}
\contentsline {subsubsection}{Recompiled code invocation glue}{40}
\contentsline {subsubsection}{C code invocation glue}{41}
\contentsline {section}{\numberline {3.6}Overall structure}{41}
\contentsline {chapter}{\numberline {4}Evaluation}{43}
\contentsline {section}{\numberline {4.1}Current status}{43}
\contentsline {subsection}{\numberline {4.1.1}Interpreter}{43}
\contentsline {subsection}{\numberline {4.1.2}System call emulation}{44}
\contentsline {subsection}{\numberline {4.1.3}Profiler}{44}
\contentsline {subsection}{\numberline {4.1.4}Recompiler}{44}
\contentsline {subsubsection}{A simple example}{45}
\contentsline {subsubsection}{A more complex example -- division}{46}
\contentsline {subsection}{\numberline {4.1.5}Benchmarks}{46}
\contentsline {section}{\numberline {4.2}Debugging}{47}
\contentsline {subsection}{\numberline {4.2.1}Sourcing ARM binaries}{47}
\contentsline {subsection}{\numberline {4.2.2}The interpreter}{48}
\contentsline {subsection}{\numberline {4.2.3}The recompiler}{49}
\contentsline {subsubsection}{Phetacode translator}{49}
\contentsline {subsubsection}{{\it x}86\ code generation}{50}
\contentsline {section}{\numberline {4.3}Quality of compiled code}{50}
\contentsline {section}{\numberline {4.4}Software engineering}{52}
\contentsline {subsection}{\numberline {4.4.1}Modularity}{53}
\contentsline {subsection}{\numberline {4.4.2}Backups}{53}
\contentsline {chapter}{\numberline {5}Conclusion}{55}
\contentsline {section}{\numberline {5.1}On current status}{55}
\contentsline {section}{\numberline {5.2}Future expansion}{55}
\contentsline {subsection}{\numberline {5.2.1}Full processor emulation}{55}
\contentsline {subsubsection}{MMU emulation}{56}
\contentsline {subsubsection}{Self-modifying code}{56}
\contentsline {subsection}{\numberline {5.2.2}Optimising code generation}{56}
\contentsline {subsection}{\numberline {5.2.3}Full machine emulation}{57}
\contentsline {subsection}{\numberline {5.2.4}Extending API emulation}{57}
\contentsline {section}{\numberline {5.3}Wrapping it up}{57}
\contentsline {chapter}{Bibliography}{59}
\contentsline {chapter}{\numberline {A}Semantics of phetacode}{61}
\contentsline {chapter}{\numberline {B}Phetacode to {\it x}86\ translation}{65}
\contentsline {chapter}{\numberline {C}Code translation example}{71}
\contentsline {chapter}{\numberline {D}Project Proposal}{79}
